<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ACME Mini_httpd组件任意文件读取漏洞(CVE-2018-18778) </title>
      <link href="/2018/11/02/ACME-Mini-httpd%E7%BB%84%E4%BB%B6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2018-18778/"/>
      <url>/2018/11/02/ACME-Mini-httpd%E7%BB%84%E4%BB%B6%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2018-18778/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>近日网上爆出 ACME Mini_httpd组件任意文件读取漏洞，据说可以影响全球百万在线物联网设备，随后一秋网络安全团队复现此漏洞。ACME mini_httpd 1.30 之前版本受此漏洞影响。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>安装mini_httpd的步骤这里就不再讲述。</p><p>此漏洞发生在 mini_httpd 中虚拟主机模式中。</p><p>启动mini_httpd 开启虚拟主机模式，虚拟主机模式是 默认不开启的。</p><p>启动虚拟主机模式命令为： <code>mini_httpd -h ip地址 -p 端口  -v</code>  -v 参数表示进入虚拟主机模式。</p><p><img src="ACME-Mini-httpd组件任意文件读取漏洞-CVE-2018-18778/1.jpg" alt=""></p><p>此漏洞是任意文件读取漏洞，首先我们读取一下 <code>/etc/passwd</code>文件，在header字段,Host值不为空的情况下，服务器返回404 页面。</p><p><img src="ACME-Mini-httpd组件任意文件读取漏洞-CVE-2018-18778/2.jpg" alt=""></p><p>此时把header头中的 Host的值便为空值，再去去读 /etc/passwd 文件可以发现服务器成功读取了 /etc/passwd 的文件内容，并回显到响应中。</p><p><img src="ACME-Mini-httpd组件任意文件读取漏洞-CVE-2018-18778/3.jpg" alt=""></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p><a href="http://www.acme.com/software/mini_httpd/" target="_blank" rel="noopener">acm官网</a>已修复此漏洞，并发布最新版本 mini_httpd 1.30版本，在此提醒用户升级到最新版mini_httpd。</p><p><img src="ACME-Mini-httpd组件任意文件读取漏洞-CVE-2018-18778/4.jpg" alt=""></p><h3 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h3><p>虽然此漏洞是任意文件读取漏洞，但是利用条件苛刻，需要在虚拟主机模式中才可以利用，经测试互联网IOT固件中，是默认关闭虚拟主机模式的，因此笔者认为，此漏洞具有一定的漏洞研究价值，但是不具备攻击者利用此漏洞进行大规模攻击的条件。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACME Mini_httpd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> LINUX应急响应独孤九式</title>
      <link href="/2018/11/02/LINUX%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%8B%AC%E5%AD%A4%E4%B9%9D%E5%BC%8F/"/>
      <url>/2018/11/02/LINUX%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%8B%AC%E5%AD%A4%E4%B9%9D%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>近几年随着互联网的发展越来越多的网络攻击事件及攻击手段层出不穷，给很多企业带来不必要的经验损失面对这些网络攻击事件企业应当如何应对？购买安全产品：WAF IDS IPS FW 来防御网络攻击事件，我国很多家知名安全公司都有自己的安全产品为企业提供安全产品保护服务器不受到外界发起的攻击以及经济损失。有人会问为什么我购买的安全产品还是被骇客攻击进来了，难道安全产品不好？答：国内知名安全公司产品都是相当知名的，原因处在与企业购买安全产品之后调试完成可以使用后直接上架导致安全产品很多防护规则策略没有启用，才导致发生网络攻击事件时安全产品没有启到对应的作用发生防御不足的现象。那么当安全产品规则策略没有调试到最佳防御状态时，骇客通过Web漏洞进入服务器后应当如何应对。下面介绍LINUX应急响应独孤九式对服务器进行安全排除 ！</li></ul><h2 id="第一式服务器历史命令检查"><a href="#第一式服务器历史命令检查" class="headerlink" title="第一式服务器历史命令检查"></a>第一式服务器历史命令检查</h2><ul><li><p>第一招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查历史命令root用户：more .bash_history</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/1.jpg" alt=""></p></li><li><p>当服务器发现存在异常情况应当第一时间:检查历史命令普通用户：more .bash_history</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/2.jpg" alt=""></p></li><li><p>当服务器发现存在异常情况应当第一时间:检查历史命令当前用户：history</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/3.jpg" alt=""></p></li></ul></li></ul><h2 id="第二式服务器重要文件检查"><a href="#第二式服务器重要文件检查" class="headerlink" title="第二式服务器重要文件检查"></a>第二式服务器重要文件检查</h2><ul><li><p>第二招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查系统重要文件检查当前用户：more /etc/passwd</p></li><li><p>可以看到当前服务器共有两个用户:root 、alkaid</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/4.jpg" alt=""></p></li><li><p>当服务器发现存在异常情况应当第一时间:检查系统重要文件检查那些用户登录过：more /etc/shadow可以看到共有两个用户:root 、alkaid 从ssh or 终端登录进来</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/5.jpg" alt=""></p></li></ul></li></ul><h2 id="第三式服务器重要目录检查"><a href="#第三式服务器重要目录检查" class="headerlink" title="第三式服务器重要目录检查"></a>第三式服务器重要目录检查</h2><ul><li><p>第三招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查重要目录查看当前服务器root目录下是否有攻击者遗留痕迹：ls -laR</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/6.jpg" alt=""></p></li><li><p>当服务器发现存在异常情况应当第一时间:检查重要目录查看当前服务器特殊权限的目录：/tmp/ or /var/tmp/ or /dev/shm/</p></li><li><p>提示：如果攻击者下载或执行（例如恶意脚本）一些脚本都会在这三个目录，应为这三个目录对所有人可写。</p></li></ul></li></ul><h2 id="第四式服务器重要命令检查"><a href="#第四式服务器重要命令检查" class="headerlink" title="第四式服务器重要命令检查"></a>第四式服务器重要命令检查</h2><ul><li><p>第四招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查系统命令防止命令被骇客替换：stat /usr/bin/ps or stat /usr/bin/netstat or stat /usr/sbin/lsof or stat /usr/bin/md5sum or stat /usr/sbin/ss or stat /usr/bin/stat</p></li><li><p>查看命令路径：which ps</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/7.jpg" alt=""></p></li><li><p>查看最近更改Modify 时间一般服务器都是很老的不会发生变化，例如发现时间改的基本上命令被替换了</p></li></ul></li></ul><h2 id="第五式服务器系统安全日志检查"><a href="#第五式服务器系统安全日志检查" class="headerlink" title="第五式服务器系统安全日志检查"></a>第五式服务器系统安全日志检查</h2><ul><li><p>第四招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查登录日志：more secure 记录安全相关信息</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/8.jpg" alt=""></p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/9.jpg" alt=""></p></li><li><p>可以看到172.16.1.132机器成功登录172.16.1.152这台服务器</p></li><li><p>Oct 31 22:27:59 localhost sshd[1452]: Accepted password for root from 172.16.1.132 port 38194 ssh2</p></li><li><p>Oct 31 22:27:59 localhost sshd[1452]: pam_unix(sshd:session): session opened for user root by (uid=0)</p></li></ul></li></ul><h2 id="第六式服务器系统安全日志检查"><a href="#第六式服务器系统安全日志检查" class="headerlink" title="第六式服务器系统安全日志检查"></a>第六式服务器系统安全日志检查</h2><ul><li><p>第六招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查用户最后一次登录时间：lastlog</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/10.jpg" alt=""></p></li></ul></li></ul><h2 id="第七式服务器系统安全日志检查"><a href="#第七式服务器系统安全日志检查" class="headerlink" title="第七式服务器系统安全日志检查"></a>第七式服务器系统安全日志检查</h2><ul><li><p>第七招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查每个用户登录、注销以及系统重启事件：lastlog</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/11.jpg" alt=""></p></li></ul></li></ul><h2 id="第八式服务器系统安全日志检查"><a href="#第八式服务器系统安全日志检查" class="headerlink" title="第八式服务器系统安全日志检查"></a>第八式服务器系统安全日志检查</h2><ul><li><p>第八招</p><ul><li><p>当服务器发现存在异常情况应当第一时间:检查用户登录失败日志：lastb</p><p><img src="/child/2018/11/02/LINUX应急响应独孤九式/12.jpg" alt=""></p></li></ul></li></ul><h2 id="第九式服务器系统其他日志检查"><a href="#第九式服务器系统其他日志检查" class="headerlink" title="第九式服务器系统其他日志检查"></a>第九式服务器系统其他日志检查</h2><ul><li>第九招<ul><li>当服务器发现存在异常情况应当第一时间:httpd服务访问日志及错误日志</li><li>httpd/</li><li>access_log 服务日志 error_log 错误日志</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> LINUX类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现自己的Burpsuite插件</title>
      <link href="/2018/11/01/%E5%A6%82%E4%BD%95%E6%8A%84%E6%8A%84%E6%94%B9%E6%94%B9%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84Burpsuite%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/11/01/%E5%A6%82%E4%BD%95%E6%8A%84%E6%8A%84%E6%94%B9%E6%94%B9%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84Burpsuite%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Burpsuite功能列表"><a href="#一、Burpsuite功能列表" class="headerlink" title="一、Burpsuite功能列表"></a>一、Burpsuite功能列表</h2><p>众所周知，burpsuite是一款非常强大的渗透测试套件。它包含一系列的功能来帮助我们更好的进行渗透测试。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/1.jpg" alt="图片1.jpg"></p><p>经常使用的功能主要是：</p><p>Proxy:请求代理模块</p><p>Spider:WEB爬虫模块</p><p>Scanner:漏洞扫描模块</p><p>Intruder:爆破模块</p><p>Repeater:请求重放模块，主要便于重发修改后的请求</p><p>Decoder:Burpsuite自带了常见的编码解码器</p><h2 id="二、Burpsuite插件API"><a href="#二、Burpsuite插件API" class="headerlink" title="二、Burpsuite插件API"></a>二、Burpsuite插件API</h2><p>Burpsuite官方提供的API中主要为让用户对它本身提供的功能进行强化，以实现实际工作中的需求，所以基本上Burpsuite自己本身的功能都有一个对应的API接口。</p><p>比如Proxy模块对应API中的IProxyListener接口；Intruder模块对应API中的IIntruderAttack接口；Scanner模块对应API中的IScannerCheck接口等</p><p>在此特别感谢大神Her0in在曾经的wooyun上针对burpsuite插件开发的分享：《BurpSuite插件开发指南之 API 篇》，《BurpSuite插件开发指南之 Java 篇》，《BurpSuite插件开发指南之 Python 篇》。大家可自行百度，Burpsuite的JAVA版API已备份在附件中。</p><p>通过阅读API文档，我们知道了代码文件名必须为BurpExtender.java,并且必须实现IBurpExtender接口.</p><h2 id="三、官方样例分析"><a href="#三、官方样例分析" class="headerlink" title="三、官方样例分析"></a>三、官方样例分析</h2><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello,World"></a>Hello,World</h2><p>写代码都是从helloworld开始的，Burpsuite官方也是这么认为的，所以为我们提供了第一个helloworld的插件Demo,地址：<a href="https://portswigger.net/blog/sample-burp-suite-extension-hello-world" target="_blank" rel="noopener">https://portswigger.net/blog/sample-burp-suite-extension-hello-world</a></p><p>在这个Demo中，我们学到知识点主要有：</p><p>设置插件名：(IBurpExtenderCallbacks)callbacks.setExtensionName(“xxx”)</p><p>控制台打印：new PrintWriter(callbacks.getStdout(), true).println(“xxx”);</p><p>发出警告：callbacks.issueAlert(“xxx”);</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/2.jpg" alt="图片2.jpg"></p><h2 id="Custom-loogger"><a href="#Custom-loogger" class="headerlink" title="Custom loogger"></a>Custom loogger</h2><p>接着我们再来看看Burpsuite收到的所有请求即LOG模块。官方插件Demo地址：<a href="https://portswigger.net/blog/sample-burp-suite-extension-custom-logger" target="_blank" rel="noopener">https://portswigger.net/blog/sample-burp-suite-extension-custom-logger</a></p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/3.jpg" alt="图片3.jpg"></p><p>为了记录所有的请求，所以实现IHttpListener接口，为了展示每个请求的详细信息，所以实现了IMessageEditorController接口，为了以更友好的展示结果，所以实现了ITab结果以表格形式展示。</p><p>如上图所示，SwingUtilities.invokeLater(new Runnable(){xxxxxxxxx})就是表格布局，这部分代码不会写，看不懂也没关系，如果你的插件需要它的话，直接抄过去就好了。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/4.jpg" alt="图片4.jpg"></p><p>在processHttpMessage()方法执行将请求输出在Swing的表格中。这里只需要记住如果想往表格中输出的话，把<strong>synchronized</strong> (log) {}这几行代码抄一抄就好了</p><h2 id="Scanner-Loogger"><a href="#Scanner-Loogger" class="headerlink" title="Scanner Loogger"></a><strong>Scanner Loogger</strong></h2><p>在查看官方提供的漏洞扫描Demo之前，我们需要先来理一下Burpsuite扫描的流程。当Burpsuite接收到请求后，想要对该请求进行漏洞扫描，就要分析得到需要扫描的位置(参数)，比如请求中的data参数存在XSS漏洞。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/5.jpg" alt="图片5.jpg"></p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/6.jpg" alt="图片6.jpg"></p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/7.jpg" alt="图片7.jpg"></p><p>下面我们贴上代码，来分析一下功能实现的流程</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/8.jpg" alt="图片8.jpg"></p><p>为了获取待扫描的位置即插入点，所以代码中实现了IScannerInsertionPointProvider接口。并且重写了getInsertionPoints()方法。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/9.jpg" alt="图片9.jpg"></p><p>此处的大致意思就是获取请求中的data参数对象，然后将这个参数值位置添加到插入点列表中。由于data参数值为base64编码，并且解码后里面又包含input和time两个参数，所以这里需要进行简单的处理。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/10.jpg" alt="图片10.jpg"></p><p>处理流程如下：先获取base64解之后的参数值，然后字符串截取获得input参数的值，然后重新构造请求包，将payload添加到baseValue处。(注：上图由于篇幅的原因还重写了几个其它的父类方法就省略了，有兴趣的话可以直接查看源码)。</p><p>接着我们再回到扫描功能上来，扫描功能对应的API接口是IScannerCheck</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/11.jpg" alt="图片11.jpg"></p><p>该接口下的doPassiveScan()方法可以理解成自动扫描，doActiveScan()可以理解成手动扫描。</p><p>在doPassiveScan()方法中只接收一个请求响应信息对象，无插入点对象，所以这部分功能无法对指定参数进行FUZZ。此处该方法的意思大致为从请求的响应内容中匹配关键字GREP_STRING，如果匹配成功，则增加一条issue，提示该URL中泄漏了CMS名称，内容为XXXXXXXX，等级为Infomation。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/12.jpg" alt="图片12.jpg"></p><p>此处在doActiveScan()方法中，主要逻辑在插入点拼接INJ_TEST字符串，重新发送请求，如果在新请求的响应内容中匹配到关键字INJ_ERROR的话，则高亮显示这段字符串，并且增加一个issue，内容为”Pipe injection”，等级为High。</p><p>这里就不带大家分析更多的示例了，大家可以GOOGLE搜索site:portswigger.net “Sample Burp Suite extension”</p><h2 id="四、如何抄抄改改"><a href="#四、如何抄抄改改" class="headerlink" title="四、如何抄抄改改"></a>四、如何抄抄改改</h2><p>这里给大家举两个示例吧</p><p><strong>CORS 漏洞挖掘</strong></p><p>关于CORS的漏洞介绍参见<a href="https://xz.aliyun.com/t/2745。测试时，如果请求头中带有Origin:[https://target.domain](https://target.domain/)" target="_blank" rel="noopener">https://xz.aliyun.com/t/2745。测试时，如果请求头中带有Origin:[https://target.domain](https://target.domain/)</a> 并且响应头中有 Access-control-allow-origin:<a href="https://target.domain/" target="_blank" rel="noopener">https://target.domain</a> 则认为此处存在CORS漏洞。</p><p>我们想在burpsuite代理请求时，我们正常浏览网站，插件能够自动实现该漏洞发现。通过文章前面的介绍，我们知道此处应该实现IScannerCheck接口，重写doPassiveScan()方法。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/13.jpg" alt="图片13.jpg"></p><p>设置应用名为”CORS扫描”，初始化控制台对象，如果有成功的结果则向控制台打印URL。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/14.jpg" alt="图片14.jpg"></p><p>测试时可以安装官方提供的日志插件，帮助我们进行调试</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/15.jpg" alt="图片15.jpg"></p><p>当我用burpsuite代理chrome之后，在chrome中登陆我的测试网站时</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/16.jpg" alt="图片16.jpg"></p><p>可以看到该插件已向控制台输出了漏洞地址。然后我们再转到Logger(日志模块)查看插件修改后的请求。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/17.jpg" alt="图片17.jpg"></p><p>当然我们也可以将该请求发送到repeater模块中测试</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/18.jpg" alt="图片18.jpg"></p><h2 id="JSONP接口发现及内网IP地址泄漏"><a href="#JSONP接口发现及内网IP地址泄漏" class="headerlink" title="JSONP接口发现及内网IP地址泄漏"></a><strong>JSONP接口发现及内网IP地址泄漏</strong></h2><p>这两个功能从实现角度上来说是一样的，都是在请求的响应内容中使用正则表达式进行匹配。所以这里我们只需要得到所有的HTTP请求与响应即可，也就是实现IHttpListener()接口。但是这回我们也想搞个表格来存放匹配成功的请求响应对象。这里我们只需要把前面的CustomLogger中的UI部分代码抄过来就好了。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/19.jpg" alt="图片19.jpg"></p><p>上面这一部分代码我们不需要做任何更改，我们只需要会写两个正则表达式分别用来匹配jsonp和内网IP，然后在响应内容中进行匹配，匹配成功则向上面的日志模块打印一条日志。</p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/20.jpg" alt="图片20.jpg"></p><p>比如我们在<a href="http://www.baidu.com中以用户名密码登陆，这个过程中我们抓包就会发现多个jsonp接口存在泄漏用户名。如下图所示" target="_blank" rel="noopener">www.baidu.com中以用户名密码登陆，这个过程中我们抓包就会发现多个jsonp接口存在泄漏用户名。如下图所示</a></p><p><img src="/child/2018/11/01/如何抄抄改改实现自己的Burpsuite插件/21.jpg" alt="图片21.jpg"></p><h2 id="其它插件应用"><a href="#其它插件应用" class="headerlink" title="其它插件应用"></a>其它插件应用</h2><p>在网上写的比较多的插件应该就是加解密了，这类插件文章比较多，这里就给出链接，不多做赘述了。</p><p><a href="https://www.freebuf.com/articles/security-management/92376.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/security-management/92376.html</a></p><p><a href="https://www.freebuf.com/articles/terminal/106673.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/terminal/106673.html</a></p><h2 id="五、最后"><a href="#五、最后" class="headerlink" title="五、最后"></a>五、最后</h2><p>本文只做抛砖引玉，向大神学习。</p><p>由于网络安全领域博大精深，难免会有疏漏。</p><p>如有更好建议欢迎向小编吐槽，进行深度…技术沟通。</p>]]></content>
      
      
      <categories>
          
          <category> Burpsuite插件类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burpsuite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Metinfo SQL注入漏洞分析</title>
      <link href="/2018/10/27/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2018/10/27/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Metinfo 6.1.2 SQL注入漏洞分析</p><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h1><p>Metinfo 米拓企业建站系统是一款适合企业网站建设的开源CMS系统,近期互联网上公开爆出 Metinfo 6.1.2 版本存在SQL注入漏洞，随后一秋网络安全团队对其漏洞进行了复现与分析。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞触发的代码在 <code>/app/system/message/web/message.class.php</code> 文件 第37行，<code>add</code>方法部分。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$_M</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_M</span><span class="token punctuation">[</span>form<span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token variable">$message</span><span class="token operator">=</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_one</span><span class="token punctuation">(</span><span class="token string">"select * from {$_M[table][column]} where module= 7 and lang ='{$_M[form][lang]}'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token variable">$_M</span><span class="token punctuation">[</span>form<span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$message</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$met_fd_ok</span><span class="token operator">=</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_one</span><span class="token punctuation">(</span><span class="token string">"select * from {$_M[table][config]} where lang ='{$_M[form][lang]}' and  name= 'met_fd_ok' and columnid = {$_M[form][id]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_M</span><span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">[</span>met_fd_ok<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$met_fd_ok</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_M</span><span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">[</span>met_fd_ok<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">okinfo</span><span class="token punctuation">(</span><span class="token string">'javascript:history.back();'</span><span class="token punctuation">,</span><span class="token string">"{$_M[word][Feedback5]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_M</span><span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">[</span>met_memberlogin_code<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>load<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sys_class</span><span class="token punctuation">(</span><span class="token string">'pin'</span><span class="token punctuation">,</span> <span class="token string">'new'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check_pin</span><span class="token punctuation">(</span><span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">okinfo</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'word'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'membercode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>从上述代码分析发现 </p><pre class=" language-php"><code class="language-php"> `<span class="token variable">$met_fd_ok</span><span class="token operator">=</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_one</span><span class="token punctuation">(</span><span class="token string">"select * from {$_M[table][config]} where lang ='{$_M[form][lang]}' and  name= 'met_fd_ok' and columnid = {$_M[form][id]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`</code></pre><p> 语句中 <code>{$_M[form][id]}</code> 参数，没有用单引号引起来判断此处应该有SQL注入漏洞。</p><p>直接拼接SQL 注入payload发现，注入的payload被过滤，无法直接进行SQL注入。继续往下分析。</p><p>继续分析发现 <code>message.class.php</code> 文件 调用了 <code>class feedback extends web</code>  父类初始化函数，跟进web类。</p><p>web类定义在  <code>/app/system/include/class/web.class.php</code> 文件。分析web类，没有发现对参数进行过滤的函数，但是发现初始化了 <code>common</code>类。 跟进<code>common</code>类，定义在<code>/app/system/include/class/common.class.php</code>文件。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$_M</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局数组$_M</span>        <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启缓存</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库连接</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表单过滤</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_lang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载语言配置</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_config_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载全站配置数据</span>       <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_url_site</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_config_lang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载当前语言配置数据</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载url数据</span>    <span class="token punctuation">}</span></code></pre><p>发现问题关键点，<code>$this-&gt;load_form();//表单过滤</code>,继续跟进<code>$this-&gt;load_form();</code>函数。</p><p>在<code>/app/system/include/class/common.class.php</code>文件51行、</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">load_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">global</span> <span class="token variable">$_M</span><span class="token punctuation">;</span>       <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'GLOBALS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'Access Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span> <span class="token keyword">as</span> <span class="token variable">$_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_key</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">!=</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$_key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">daddslashes</span><span class="token punctuation">(</span><span class="token variable">$_value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_key</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">!=</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$_key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">daddslashes</span><span class="token punctuation">(</span><span class="token variable">$_value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$_key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_key</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">!=</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$_key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">daddslashes</span><span class="token punctuation">(</span><span class="token variable">$_value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//伪静态兼容</span>            <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lang'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lang'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'metid'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'metid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[0-9A-Za-z]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">echo</span> <span class="token string">"No data in the database,please reinstall."</span><span class="token punctuation">;</span>           <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里看到把 POST、GET、COOKIE 传递过来的参数用<code>daddslashes</code>进行了全局过滤。跟进<code>daddslashes</code>。</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">daddslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token variable">$force</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">'MAGIC_QUOTES_GPC'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'MAGIC_QUOTES_GPC'</span><span class="token punctuation">,</span> <span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">MAGIC_QUOTES_GPC</span> <span class="token operator">||</span> <span class="token variable">$force</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$string</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">daddslashes</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token variable">$force</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">'IN_ADMIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token function">sqlinsert</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里判断是否开启了get_magic_quotes_gpc() ，如果没开启或者 <code>$force</code>不为空就进入下面的逻辑。有判断了是否定义<code>IN_ADMIN</code> 常量，如果没有定义就进入 <code>$string = trim(addslashes(sqlinsert($string)));</code>,从代码逻辑发现我们第一步进行SQL注入，失败是因为注入的payload被过滤导致，那么我们传递的值应该就是进入了这个过滤，用<code>sqlinsert</code>函数进行了过滤。</p><p>看一下<code>sqlinsert</code>函数是怎么进行的过滤。</p><pre class=" language-php"><code class="language-php">     <span class="token keyword">function</span> <span class="token function">sqlinsert</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$string</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sqlinsert</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token variable">$string_old</span> <span class="token operator">=</span> <span class="token variable">$string</span><span class="token punctuation">;</span>             <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"%5C"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"%22"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"%27"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"%2A"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"~"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">,</span> <span class="token string">"\sel\ect"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"insert"</span><span class="token punctuation">,</span> <span class="token string">"\ins\ert"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"\up\date"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> <span class="token string">"\de\lete"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"union"</span><span class="token punctuation">,</span> <span class="token string">"\un\ion"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"into"</span><span class="token punctuation">,</span> <span class="token string">"\in\to"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"load_file"</span><span class="token punctuation">,</span> <span class="token string">"\load\_\file"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"outfile"</span><span class="token punctuation">,</span> <span class="token string">"\out\file"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">,</span> <span class="token string">"\sle\ep"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$string_old</span><span class="token operator">!=</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$string</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>利用这个SQL注入前提是绕过<code>sqlinsert</code>函数的过滤，绕过过滤不是很难就不详细解释。</p><p>回到上面的代码，进入这个逻辑要满足<code>IN_ADMIN</code> 常量已被定义。 跟踪 <code>IN_ADMIN</code> 常量。</p><p>在<code>/admin/index.php</code>文件中进行了定义。</p><pre class=" language-php"><code class="language-php"> <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'IN_ADMIN'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接口</span> <span class="token variable">$M_MODULE</span><span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token variable">$M_MODULE</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"index"</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"index"</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"doindex"</span><span class="token punctuation">;</span> @<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'M_NAME'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'M_MODULE'</span><span class="token punctuation">,</span> <span class="token variable">$M_MODULE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'M_CLASS'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'M_ACTION'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">require_once</span> <span class="token string">'../app/system/entrance.php'</span><span class="token punctuation">;</span></code></pre><p>从上述代码发现 ,漏洞函数是add并且不带do，于是找到 do开头的函数。经过查找在<code>/app/system/message/web/message.class.php</code>文件找到了<code>domessage</code>。</p><pre class=" language-php"><code class="language-php">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">domessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">global</span> <span class="token variable">$_M</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'add'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check_field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$_M</span><span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token variable">$classnow</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">input_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$data</span> <span class="token operator">=</span> load<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sys_class</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'new'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'column'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_column_id</span><span class="token punctuation">(</span><span class="token variable">$classnow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'access'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add_array_input</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seo</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'keywords'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seo_title</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'ctitle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add_input</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">require_once</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tem/message_index'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>至此我们已经分析完了Metinfo 6.1.2 SQL注入漏洞参数的整个流程。</p><h2 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h2><p>修改文件：</p><pre class=" language-php"><code class="language-php"><span class="token operator">/</span>app<span class="token operator">/</span>system<span class="token operator">/</span>message<span class="token operator">/</span>web<span class="token operator">/</span>message<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>php</code></pre><p><strong>修改前</strong></p><pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token variable">$met_fd_ok</span><span class="token operator">=</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_one</span><span class="token punctuation">(</span><span class="token string">"select * from {$_M[table][config]} where lang ='{$_M[form][lang]}' and  name= 'met_fd_ok' and columnid = {$_M[form][id]}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>修改后</strong></p><pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token variable">$met_fd_ok</span><span class="token operator">=</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get_one</span><span class="token punctuation">(</span><span class="token string">"select * from {$_M[table][config]} where lang ='{$_M[form][lang]}' and  name= 'met_fd_ok' and columnid = ‘{$_M[form][id]}’"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>官网已发布最新版本6.1.3修复此漏洞，请及时下载升级。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渗透课堂</title>
      <link href="/2018/10/26/%E6%B8%97%E9%80%8F%E8%AF%BE%E5%A0%82/"/>
      <url>/2018/10/26/%E6%B8%97%E9%80%8F%E8%AF%BE%E5%A0%82/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是渗透测试"><a href="#1、什么是渗透测试" class="headerlink" title="1、什么是渗透测试"></a>1、什么是渗透测试</h2><p>渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。这个过程包括对系统的任   何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件  主动利用安全漏洞。</p><p>渗透测试是指渗透人员在不同的位置（比如从内网、从外网等位置）利用各种手段对某个特定网络进行测试，以期   发现和挖掘系统中存在的漏洞，然后输出渗透测试报告，并提交给网络所有者。网络所有者根据渗透人员提供的渗  透测试报告，可以清晰知晓系统中存在的安全隐患和问题。</p><p>简单来说渗透测试就是一种通过模拟恶意攻击者的技术和方法，挫败目标系统安全控制措施，取得访问控制权，并   发现具备业务影响后果安全隐患的一种安全测试与评估方式。</p><h2 id="2、为什么需要做渗透测试"><a href="#2、为什么需要做渗透测试" class="headerlink" title="2、为什么需要做渗透测试"></a>2、为什么需要做渗透测试</h2><p>目前，99%的大型网站都被拖过库，从而泄漏了大量用户数据，导致公司损失惨重。其实，类似的损失大可避免，  譬如在未发生安全事件前提前进行渗透测试，先于黑客发现系统的安全隐患，按危险程度提前对系统进行一一改      进，保证系统的每个环节在未知环境下都能经得起黑客挑战，进一步巩固客户对企业及平台的信赖。</p><p>通过渗透测试，企业用户可以从攻击角度了解系统是否存在隐性漏洞和安全风险，特别是在进行安全项目之前进行   的渗透测试，可以对信息系统的安全性得到深刻的感性认知，有助于进一步健全安全建设体系；渗透测试完毕后，   也可以帮助用户更好地验证经过安全保护后的网络是否真实的达到了预期安全目标、遵循了相关安全策略、符合安  全合规的要求。</p><h2 id="3、渗透测试流程"><a href="#3、渗透测试流程" class="headerlink" title="3、渗透测试流程"></a>3、渗透测试流程</h2><table><thead><tr><th><strong>1.**</strong>前期交互阶段<strong>**(Pre- Engagement Interacction)</strong></th><th><strong>确定渗透范围、目标、限制条件和服务合同等。</strong></th></tr></thead><tbody><tr><td><strong>2.**</strong>情报搜集阶段**(Information Gathering)</td><td>利用各种信息来源与搜索技术方法，尝试获取更多关于目标组织网络拓扑、系统配置与 安全防御措施的信息。</td></tr><tr><td><strong>3.**</strong>威胁建模阶段**(Theart Modeling)</td><td>通过团队共同的缜密情报分析与攻击思路头脑风暴，从大量的信息中清理头绪，确定最 可行的攻击通道。</td></tr><tr><td><strong>4.**</strong>漏洞分析阶段**(Vulnerability Analysis)</td><td>综合分析前几个阶段获取并汇总的情报信息，特别是安全漏洞扫描结果，服务查点信息 等，通过搜索在可获取的渗透代码资源，找出可以实施渗透攻击的攻击点，并在实验环 境中进行验证。</td></tr><tr><td><strong>5.**</strong>渗透攻击阶段**(Exploitation)</td><td>利用找出的目标系统安全漏洞，来真正的入侵到系统当中。获取访问控制权</td></tr><tr><td><strong>6.**</strong>后渗透攻击阶<strong>**段</strong> (Post Exploitation)</td><td>需要渗透测试团队根据目标组织的业务经营模式、保护资产模式与安全防御规划的不同 特点，自主设计出攻击目标，识别关键基础设施，并寻找客户组织最具有价值和尝试安 全保护的信息和资产，最终达成能够对客户组织造成最重要业务影响的攻击途径</td></tr><tr><td><strong>7.**</strong>报告阶段阶段**(Reporting)</td><td>凝聚着之前所有阶段中渗透测试团队所获取的关键情报信息、探测和发掘出的系统安全 漏洞、成功渗透攻击的过程，以及造成业务影响后果的途径（同时还要站在防御者的角 度上，帮助他们分析安全防御体系中的薄弱环节、存在的问题，以及修补和升级技术方 案）</td></tr></tbody></table><h2 id="渗透测试找哪家"><a href="#渗透测试找哪家" class="headerlink" title="渗透测试找哪家"></a>渗透测试找哪家</h2><p><strong>一秋网络科技渗透测试团队</strong>，由经验丰富的专业安全工程师组成，成员也一直在学习和研究最新的漏洞及漏洞利用   和防护，能够提供全方位的漏洞挖掘、最深入的web安全检测服务。我们有着许多成功的渗透测试案例，包括银     行、电商、政府、电力、企业等典型的客户，因此有着非常丰富的渗透测试经验及最的技术，能够为客户提供同时   具备深度和广度的web安全检测，能够帮助客户从根源上防止黑客的攻击，为客户提供保架护航的能力。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XSS攻击另类玩法</title>
      <link href="/2018/10/10/XSS%E6%94%BB%E5%87%BB%E5%8F%A6%E7%B1%BB%E7%8E%A9%E6%B3%95/"/>
      <url>/2018/10/10/XSS%E6%94%BB%E5%87%BB%E5%8F%A6%E7%B1%BB%E7%8E%A9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-XSS攻击管理员"><a href="#1-XSS攻击管理员" class="headerlink" title="1.XSS攻击管理员"></a>1.XSS攻击管理员</h2><p>后台触发存储型XSS，网站设置http-only，窃取的cookie无效。那么如何在这种情况下利用xss漏洞。无法获取cookie，但是我们可以利用xss漏洞，以管理员的权限，添加一个新的管理员。没错，就是让管理员给我们加一个高权限账号。这里我们会用到 JavaScript和Ajax 技术。 利用xmlhttp 发送一个http请求，在后台发送一个添加管理员的post请求。<br><img src="/child/2018/10/10/XSS攻击另类玩法/xss1.jpg" alt=""></p><h2 id="2-XSS截取客户的屏幕"><a href="#2-XSS截取客户的屏幕" class="headerlink" title="2.XSS截取客户的屏幕"></a>2.XSS截取客户的屏幕</h2><p>现在随着技术的进步，前端技术支持的面非常广泛。xss漏洞可以利用html5的 canvas 来进行屏幕的截屏功能，类似于远程控制木马查看对方屏幕功能。这个可以大大的提高对于进一步入侵的信息收集。废话不说直接上代码。这里需要用到一个js库 html2canvas.js<br><img src="/child/2018/10/10/XSS攻击另类玩法/xss2.jpg" alt=""><br>上面的代码是针对 pc端的截屏，手机端的截屏xss代码有所不同<br><img src="/child/2018/10/10/XSS攻击另类玩法/xss3.jpg" alt=""><br>这两种服务端获取到的post数据包是 base64格式的 ，我们只要进行转码即可看到对方的屏幕截图。</p><h2 id="3-XSS对移动端的攻击"><a href="#3-XSS对移动端的攻击" class="headerlink" title="3.XSS对移动端的攻击"></a>3.XSS对移动端的攻击</h2><p>现在越来越多的人喜欢用手机查看网页，xss针对手机端的支持也很友好。这里只针对手机端Firefox浏览器说明。xss获取对方经纬度代码<br><img src="/child/2018/10/10/XSS攻击另类玩法/xss4.jpg" alt=""><br>xss获取电池状态的代码，这里需要用到JavaScript Battery API<br><img src="/child/2018/10/10/XSS攻击另类玩法/xss5.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 攻击类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>入坑路由器安全</title>
      <link href="/2018/09/25/%E5%85%A5%E5%9D%91%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/"/>
      <url>/2018/09/25/%E5%85%A5%E5%9D%91%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>QEMU安装</p><pre class=" language-php"><code class="language-php">git clone git<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//git.qemu.org/qemu.git</span>cd qemugitsubmodule initgit submodule update <span class="token operator">--</span>recursivesudo apt install libglib2<span class="token number">.0</span> libglib2<span class="token number">.0</span><span class="token operator">-</span>devsudo apt install autoconf automake libtoolcd qemu <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token operator">/</span>configuremakesudo make install</code></pre><p>QEMU 网络配置</p><p><strong>基手动配置（启动一次就要配置一次）</strong></p><pre class=" language-php"><code class="language-php">$ sudo apt<span class="token operator">-</span>get install uml<span class="token operator">-</span>utilities$ sudo tunctl <span class="token operator">-</span>t tap0 <span class="token operator">-</span>u sebao$ sudo ifconfig tap0 <span class="token number">172.16</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span><span class="token number">24</span>ifconfig tap0</code></pre><p><strong>进入qemu虚拟机再次配置</strong></p><pre class=" language-php"><code class="language-php">sudo ifconfig eth0 <span class="token number">172.16</span><span class="token punctuation">.</span><span class="token number">0.2</span><span class="token operator">/</span><span class="token number">24</span></code></pre><p><strong>自动配置</strong></p><pre class=" language-php"><code class="language-php">sudo apt<span class="token operator">-</span>get install uml<span class="token operator">-</span>utilities</code></pre><p><strong>sudo vi /etc/network/interfaces</strong></p><pre class=" language-php"><code class="language-php">auto loiface loinet loopbackauto eth0iface eth0 inet dhcpiface br0 inet dhcp  bridge_ports eth0  bridge_maxwait <span class="token number">0</span></code></pre><p><strong>sebao@ubuntu:~$ sudo cat /etc/default/grub</strong></p><pre class=" language-php"><code class="language-php"> <span class="token shell-comment comment"># If you change this file, run </span><span class="token string">'update-grub'</span> afterwards toupdate <span class="token shell-comment comment">#/boot/grub/grub.cfg.</span> <span class="token shell-comment comment"># For full documentation of the options in this file, see:</span> <span class="token shell-comment comment">#   info -f grub -n </span><span class="token string">'Simple configuration'</span> <span class="token constant">GRUB_DEFAULT</span><span class="token operator">=</span><span class="token number">0</span> <span class="token constant">GRUB_HIDDEN_TIMEOUT</span><span class="token operator">=</span><span class="token number">0</span> <span class="token constant">GRUB_HIDDEN_TIMEOUT_QUIET</span><span class="token operator">=</span><span class="token boolean">true</span> <span class="token constant">GRUB_TIMEOUT</span><span class="token operator">=</span><span class="token number">10</span> <span class="token constant">GRUB_DISTRIBUTOR</span><span class="token operator">=</span>`lsb_release <span class="token operator">-</span>i <span class="token operator">-</span>s <span class="token number">2</span><span class="token operator">></span> <span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">echo</span> Debian` <span class="token constant">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="token operator">=</span><span class="token string">"quiet splash"</span> <span class="token constant">GRUB_CMDLINE_LINUX</span><span class="token operator">=</span><span class="token string">"net.ifnames=0 biosdevname=0"</span> <span class="token shell-comment comment"># Uncomment to enable BadRAM filtering, modify to suit your needs</span> <span class="token shell-comment comment"># This works with Linux (no patch required) and with any kernel that obtains</span> <span class="token shell-comment comment"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)#GRUB_BADRAM=</span><span class="token string">"0x01234567,0xfefefefe,0x89abcdef,0xefefefef"</span> <span class="token shell-comment comment"># Uncomment to disable graphical terminal (grub-pc only)#GRUB_TERMINAL=console</span> <span class="token shell-comment comment"># The resolution used on graphical terminal</span> <span class="token shell-comment comment"># note that you can use only modes which your graphic card supports via VBE</span> <span class="token shell-comment comment"># you can see them in real GRUB with the command `vbeinfo'</span> <span class="token shell-comment comment">#GRUB_GFXMODE=640x480</span> <span class="token shell-comment comment"># Uncomment if you don't want GRUB to pass </span><span class="token string">"root=UUID=xxx"</span> parameter to Linux <span class="token shell-comment comment">#GRUB_DISABLE_LINUX_UUID=true</span> <span class="token shell-comment comment"># Uncomment to disable generation of recovery mode menu entries</span> <span class="token shell-comment comment">#GRUB_DISABLE_RECOVERY=</span><span class="token string">"true"</span> <span class="token shell-comment comment"># Uncomment to get a beep at grub start#GRUB_INIT_TUNE=</span><span class="token string">"480 440 1"</span></code></pre><p><strong>sebao@ubuntu:~$ sudo cat /etc/qemu-ifup</strong></p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#!/bin/sh</span><span class="token keyword">echo</span> <span class="token string">"Executing /etc/qemu-ifup"</span><span class="token keyword">echo</span> <span class="token string">"bridge networking"</span>sudo ifdown eth0sudo ifup br0<span class="token keyword">echo</span> <span class="token string">"Bringing up $1 for bridge mode"</span>sudo <span class="token operator">/</span>sbin<span class="token operator">/</span>ifconfig <span class="token variable">$1</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span> promisc up<span class="token keyword">echo</span> <span class="token string">"Adding $1 to br0"</span>sudo <span class="token operator">/</span>sbin<span class="token operator">/</span>brctl addif br0 <span class="token variable">$1</span>sleep <span class="token number">2</span></code></pre><p>启动QEMU</p><pre class=" language-php"><code class="language-php">qemu<span class="token operator">-</span>system<span class="token operator">-</span>mips <span class="token operator">-</span>M malta <span class="token operator">-</span>kernel vmlinux<span class="token number">-2.6</span><span class="token punctuation">.</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>4kc<span class="token operator">-</span>malta <span class="token operator">-</span>hda debiansqueezemips_standard<span class="token punctuation">.</span>qcow2 <span class="token operator">-</span>append <span class="token string">"root=/dev/sda1 console=tty0"</span> <span class="token operator">-</span>net nic<span class="token punctuation">,</span>macaddr<span class="token operator">=</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">54</span><span class="token punctuation">:</span>be<span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a9 <span class="token operator">-</span>net tap</code></pre><p>DIR601 踩坑</p><p><strong>把 D-Link dir601 固件包导入qemu虚拟机,解压并进入squashfs-root 文件夹</strong></p><p><strong>解压web目录</strong></p><pre class=" language-php"><code class="language-php">tar zxvf mnt<span class="token operator">/</span>www<span class="token punctuation">.</span>tgz www<span class="token operator">/</span>cp usr<span class="token operator">/</span>bin<span class="token operator">/</span>my_cgi<span class="token punctuation">.</span>cgi www<span class="token operator">/</span></code></pre><p><strong>直接运行http服务会报各种错误，需要手动创建文件夹，以及文件</strong></p><p><strong>创建文件: /var/run/lighttpd.pid</strong></p><p><strong>创建文件:/log/lighttpd/error.log</strong></p><p><strong>WWW目录下 rt文件夹里面的所有文件，移动到 www目录</strong></p><pre class=" language-php"><code class="language-php">   chroot <span class="token punctuation">.</span> usr<span class="token operator">/</span>bin<span class="token operator">/</span>lighttpd <span class="token operator">-</span>f mnt<span class="token operator">/</span>lighttpd<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf   <span class="token number">57</span>  cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>   <span class="token number">58</span>  ls   <span class="token number">59</span>  cd squashfs<span class="token operator">-</span>root<span class="token operator">/</span>   <span class="token number">60</span>  ls   <span class="token number">61</span>  cd www<span class="token operator">/</span>   <span class="token number">62</span>  ls   <span class="token number">63</span>  cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>   <span class="token number">64</span>  chroot <span class="token punctuation">.</span> usr<span class="token operator">/</span>bin<span class="token operator">/</span>lighttpd <span class="token operator">-</span>f mnt<span class="token operator">/</span>lighttpd<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf    <span class="token number">65</span>  cat mnt<span class="token operator">/</span>lighttpd<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf <span class="token operator">|</span> grep <span class="token string">"lighttpd.pid"</span>   <span class="token number">66</span>  cd <span class="token keyword">var</span><span class="token operator">/</span>   <span class="token number">67</span>  ls   <span class="token number">68</span>  mkdir run   <span class="token number">69</span>  ls   <span class="token number">70</span>  cd run   <span class="token number">71</span>  vi lighttpd<span class="token punctuation">.</span>pid   <span class="token number">72</span>  cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>   <span class="token number">73</span>  chroot <span class="token punctuation">.</span> usr<span class="token operator">/</span>bin<span class="token operator">/</span>lighttpd <span class="token operator">-</span>f mnt<span class="token operator">/</span>lighttpd<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf    <span class="token number">77</span>  mkdir log   <span class="token number">78</span>  cd log<span class="token operator">/</span>   <span class="token number">79</span>  mkdir lighttpd   <span class="token number">80</span>  cd lighttpd<span class="token operator">/</span>   <span class="token number">81</span>  vi error<span class="token punctuation">.</span>log   <span class="token number">82</span>  cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>   <span class="token number">83</span>  chroot <span class="token punctuation">.</span> usr<span class="token operator">/</span>bin<span class="token operator">/</span>lighttpd <span class="token operator">-</span>f mnt<span class="token operator">/</span>lighttpd<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf    <span class="token number">84</span>  cd www<span class="token operator">/</span>   <span class="token number">85</span>  ls   <span class="token number">86</span>  cd rt<span class="token operator">/</span>   <span class="token number">87</span>  ls   <span class="token number">88</span>  cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>   <span class="token number">89</span>  ls   <span class="token number">90</span>  ls   <span class="token number">91</span>  cd rt<span class="token operator">/</span>   <span class="token number">92</span>  ls   <span class="token number">93</span>  ls <span class="token operator">-</span>ll   <span class="token number">94</span>  cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>   <span class="token number">95</span>  mv rt<span class="token operator">/</span> <span class="token punctuation">.</span>   <span class="token number">96</span>  ls   <span class="token number">97</span>  mv rt<span class="token operator">/</span><span class="token operator">*</span> <span class="token punctuation">.</span></code></pre><p>启动固件</p><pre class=" language-php"><code class="language-php">chroot <span class="token punctuation">.</span> usr<span class="token operator">/</span>bin<span class="token operator">/</span>lighttpd <span class="token operator">-</span>f mnt<span class="token operator">/</span>lighttpd<span class="token operator">/</span>lighttpd<span class="token punctuation">.</span>conf</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
